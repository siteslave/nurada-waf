# WAF Core Manager Configuration
listen:
  address: "0.0.0.0"
  port: 8080 # Primary HTTP listen port (used only when TLS.disabled)

tls:
  # TLS configuration. When enabled, the server will run ONLY on this TLS port (no HTTP listener/fallback).
  enabled: true # Set to false to disable TLS and serve only HTTP on the primary listen port
  cert_path: ./certs/server.crt
  key_path: ./certs/server.key
  port: 9443 # HTTPS port.
  redirect_http_to_https: true # If TLS.enabled, redirect HTTP (primary listen port) to HTTPS
logging:
  log_file: ./log/pingora-waf.log
  max_file_size_mb: 10
  max_backup_files: 5
  timezone: "Asia/Bangkok"
  redact_headers:
    - Authorization
    - Cookie
    - X-API-Key
  # Replacement token for sensitive values
  sensitive_replacement: "<redacted>"
  # Limit of body bytes kept for preview/redaction logging
  max_body_log_bytes: 256
  # Regex patterns applied to body preview before logging (examples below)
  redact_body_patterns:
    - "(?i)password=[^&\\s]+"
    - "(?i)secret=[^&\\s]+"
  syslog:
    enabled: false
    server: "127.0.0.1:514" # syslog host:port
    protocol: "udp" # currently only udp
    facility: "local0" # e.g. local0..local7
    # hostname: "waf01"        # optional override
    app_name: "wafcore"
alerting:
  enabled: false # master switch for all alerting
  # immediate: send every event; aggregate: batch within a window and send summary
  mode: "aggregate"
  aggregate:
    window_secs: 300 # 5 minutes
    max_ips: 10
    include_payloads: true
    max_payloads: 5
    # Phase 1 Alert Resilience: queue bounds + periodic drop summaries
    queue_capacity: 2048
    drop_log_every: 50
    # Phase 2 Enrichment (optional): include top user-agents & latency stats in summaries
    include_user_agents: true # Collect & report top user-agents in aggregation window
    max_user_agents: 10 # Max distinct user-agents to include (sorted by count desc)
    include_latency: true # Include latency stats (count, p95) using sampled requests
    latency_sample_rate: 0.25 # 0.0 - 1.0 proportion of requests sampled for latency (hash-based deterministic)
  webhook:
    enabled: false
    # url: "https://your-endpoint.example/api/waf-alert" # uncomment and set
    method: "POST"
    timeout_secs: 5
    headers:
      # Authorization: "Bearer <token>"
      X-Source: "wafcore"
  telegram:
    enabled: true
    bot_token: "PLEASE-CHANGE-THIS-TOKEN"
    chat_id: "TELEGRAM-CHAT-ID" # use negative for groups
    parse_mode: "Markdown"
    timeout_secs: 5

# Error page / content negotiation settings
# - expose_reason: ควบคุมว่าจะส่งรายละเอียดเหตุผลการบล็อกกลับไปให้ผู้ใช้หรือไม่ (ควรเป็น false ใน production)
# - brand_*: ปรับแต่งธีมของหน้า HTML ที่แสดงเมื่อถูกบล็อก (มีผลกับ JSON เฉพาะ brand_title/brand_message)
error_page:
  expose_reason: false # ไม่เปิดเผยเหตุผลเชิงเทคนิคใน production
  brand_title: "Nurada Web Application Firewall"
  brand_message: "Message from Web Application Firewall (WAF)."
  support_contact: "test@example.com"

upstream_security:
  deny_private: true
  allow_cidrs:
    - 203.0.113.0/24
  deny_cidrs:
    - 198.51.100.66/32
  resolve_dns: true
  log_allowed: false

upstreams:
  - name: backend1
    address: 127.0.0.1:4000,127.0.0.1:4001
    peer_options:
      connection_timeout_secs: 5
      read_timeout_secs: 30
      write_timeout_secs: 30
      idle_timeout_secs: 60
      verify_cert: false
      verify_hostname: false

routes:
  - path: /api/*
    upstream: backend1
    strip_prefix: true
    plugins:
      xss: true
      sqli: true
      path_traversal: true
      cmdi: true
      user_agent_filter: true
      geoip: false
    geoip_countries: ["CN", "RU", "FR", "TH"]
    rate_limit:
      enabled: true
      max_requests: 60
      window_secs: 60
      block_duration_secs: 600
  - path: /static/*
    upstream: backend2
    strip_prefix: true # ตัด /static/ ออก
    plugins:
      xss: false
      sqli: false
      path_traversal: false
      cmdi: false
      user_agent_filter: false
      geoip: false
      rfi: false
      lfi: false
      file_upload: false
# SQL Injection Protection
sqli_protection:
  enabled: true # Enable/disable SQL injection protection
  protection_mode: "manual" # Protection mode: "api" or "manual"

  # API mode settings (used when detection_mode = "api")
  api_url: "http://localhost:8002/predict" # SQLi detection API endpoint
  api_token: "waf-YOU-TOKEN-KEY-HERE" # API authentication token
  timeout_secs: 5 # API request timeout in seconds
  confidence_threshold: 0.7 # Confidence threshold (0.0-1.0) for blocking
  max_concurrent_api_requests: 8 # Limit concurrent API calls (0 = unlimited)
  api_error_threshold: 5 # Consecutive API failures before opening circuit breaker (0 = disable)
  api_cooldown_secs: 30 # Seconds to wait before retrying after the circuit opens
  # Streaming backpressure & concurrency (manual mode only)
  streaming_max_concurrent: 32 # Maximum concurrent streaming body inspections (0 = unlimited / not recommended)

  # Manual mode settings (used when detection_mode = "manual")
  # Custom regex patterns for SQL injection detection
  patterns:
    # Basic SQL keywords and functions
    - "(?i)\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|TRUNCATE|EXEC|EXECUTE)\\b"
    # Union-based attacks
    - "(?i)\\bUNION\\s+(ALL\\s+)?SELECT\\b"
    # Comment patterns
    - "(?i)(--|#|/\\*|\\*/|;)"
    # String manipulation functions
    - "(?i)\\b(CONCAT|SUBSTRING|ASCII|CHAR|CHR)\\s*\\("
    # Boolean-based blind SQL injection
    - "(?i)\\b(AND|OR)\\s+\\d+\\s*=\\s*\\d+"
    # Time-based blind SQL injection
    - "(?i)\\b(SLEEP|WAITFOR|DELAY|BENCHMARK)\\s*\\("
    # Information schema queries
    - "(?i)\\b(INFORMATION_SCHEMA|SYSOBJECTS|SYSCOLUMNS)\\b"
    # Database version queries
    - "(?i)\\b(@@VERSION|VERSION\\(\\)|SQLITE_VERSION)\\b"
    # SQL function calls
    - "(?i)\\b(LOAD_FILE|INTO\\s+OUTFILE|INTO\\s+DUMPFILE)\\b"
    # Hex and binary patterns
    - "(?i)\\b0x[0-9a-f]+"
    # SQL operators
    - "(?i)\\b(LIKE|RLIKE|REGEXP|BETWEEN|IN\\s*\\()\\b"

  # Keyword-based detection for common SQL injection attempts
  keywords:
    - "admin'--"
    - "admin'/*"
    - "' or 1=1--"
    - "' or 1=1#"
    - "' or 1=1/*"
    - "') or '1'='1--"
    - "') or ('1'='1--"
    - "1' or '1'='1"
    - "1' or '1'='1'--"
    - "1' or '1'='1'#"
    - "1' or '1'='1'/*"
    - "1 or 1=1"
    - "1 or 1=1--"
    - "1 or 1=1#"
    - "1 or 1=1/*"
    - "' union select"
    - "' union all select"
    - "' having 1=1--"
    - "' group by"
    - "' order by"
    - "'; exec"
    - "'; execute"
    - "'; drop"
    - "'; create"
    - "'; insert"
    - "'; update"
    - "'; delete"
    - "waitfor delay"
    - "sleep("
    - "benchmark("
    - "pg_sleep("
    - "dbms_pipe.receive_message"
    - "information_schema"
    - "sysobjects"
    - "syscolumns"
    - "sysusers"
    - "@@version"
    - "version()"
    - "database()"
    - "user()"
    - "current_user"
    - "load_file("
    - "into outfile"
    - "into dumpfile"
    - "xp_cmdshell"
    - "sp_executesql"
    - "convert("
    - "cast("
    - "char("
    - "ascii("
    - "substring("
    - "concat("
    - "length("
    - "count("

  case_sensitive: false # Whether pattern/keyword matching is case sensitive

  # Common settings (used in both modes)
  action: "block" # Action to take: "block" or "log"
  response_code: 403 # HTTP response code when blocking
  check_query_params: true # Check URL query parameters
  check_post_body: true # Check POST request body
  check_headers: false # Check HTTP headers for SQLi
  max_payload_size: 8192 # Maximum payload size to check (bytes)
rate_limit:
  max_requests: 100
  window_secs: 60
  block_duration_secs: 1200
  enable_global_limiter: true
  global_max_requests_per_sec: 10
  cache_capacity: 50000 # Increase cache to retain counters for many distinct client IPs
  blocked_cache_capacity: 20000 # Track large numbers of temporarily blocked clients

# IP Filter configuration
ip_filter:
  enabled: true # Toggle IP whitelist/blacklist feature
  block_response_code: 403 # HTTP status when blocking (e.g. 403 or 451)

  # Whitelist: CIDR หรือ IP เดี่ยวก็ได้ (รายการนี้จะมาก่อนเสมอ)
  ip_whitelist:
    - "127.0.0.1/32" # loopback (ทดสอบภายในเครื่อง)
    - "192.168.1.0/24" # เครือข่ายสำนักงานภายใน
    - "10.10.5.42/32" # เครื่องเซิร์ฟเวอร์เฉพาะเจาะจง
    - "10.0.0.10"

  # Blacklist: CIDR หรือ IP เดี่ยว (ถ้าอยู่ทั้ง whitelist และ blacklist จะ allow ตาม whitelist precedence)
  ip_blacklist:
    - "203.0.113.0/24" # ตัวอย่างเครือข่าย (TEST-NET-3) สมมติว่าพบพฤติกรรมโจมตี
    - "198.51.100.25/32" # IP รายตัว (TEST-NET-2) ที่ต้องการบล็อคเฉพาะ
    - "203.0.113.99"
    - "203.0.113.100"
rfi_protection:
  enabled: true # เปิด/ปิด Remote File Inclusion protection
  detection_only: false # true = log only; false = block
  response_code: 403 # HTTP status code when blocking RFI
  block_message: "Remote File Inclusion attempt detected" # Generic message shown when blocked (reason hidden if expose_reason=false)
  max_url_length: 2048 # Maximum full URL length (path+query) to inspect; longer URLs are skipped (allowed) for performance safety
  blocked_schemes:
    - "http://"
    - "https://"
    - "ftp://"
    - "sftp://"
    - "php://"
    - "file://"
    - "data:"
  sensitive_params:
    - file
    - path
    - page
    - include
    - template
    - doc
    - url
    - view
    - action
  suspicious_extensions:
    - .php
    - .phtml
    - .inc
    - .txt
    - .cfg
    - .conf
  max_value_len: 4096 # cap parameter value length scanned
  whitelist_domains: [] # List of remote hostnames allowed even if scheme matches (exact, case-insensitive)
  check_post_body: true # Inspect application/x-www-form-urlencoded POST/PUT/PATCH body
  max_body_size: 8192 # Max body bytes to scan for RFI
lfi_protection:
  enabled: true # เปิด/ปิด Local File Inclusion protection
  detection_only: false # true = log only
  response_code: 403
  block_message: "Local File Inclusion attempt detected"
  max_url_length: 2048
  sensitive_params:
    - file
    - path
    - page
    - include
    - template
    - doc
  traversal_tokens:
    - "../"
    - "..\\"
    - "%2e%2e%2f"
    - "%2e%2e%5c"
    - "..%2f"
    - "..%5c"
  sensitive_files:
    - /etc/passwd
    - /etc/shadow
    - c:/windows/system32/config/sam
    - c:/boot.ini
    - .env
    - wp-config.php
  max_value_len: 4096
  check_post_body: true
  max_body_size: 8192
file_upload_protection:
  enabled: true # เปิด/ปิด File Upload protection
  detection_only: false # true = log only (observe traffic first)
  response_code: 403
  block_message: "Malicious file upload blocked"
  max_multipart_size: 10485760 # 10MB aggregate cap
  max_file_size: 2097152 # 2MB per file
  max_files: 10 # Prevent excessive part counts
  allowed_extensions: [jpg, jpeg, png, gif, pdf, xlsx, xls, docx, txt]
  blocked_extensions:
    [
      php,
      php5,
      phtml,
      jsp,
      asp,
      aspx,
      exe,
      dll,
      sh,
      bash,
      bat,
      cmd,
      ps1,
      cgi,
      pl,
      rb,
      jar,
      war,
      class,
    ]
  inspect_magic: true # Enable signature/magic byte inspection
  # Available magic type identifiers (add to list to enforce):
  #   php, elf, pe, jar, class, script, pdf, png, zip
  # Defaults intentionally exclude pdf/png/zip to avoid breaking legitimate uploads; opt-in if required.
  blocked_magic_types: [php, elf, pe, jar, class, script]
  allow_content_type_mismatch: false # Block when MIME header and magic differ suspiciously
  normalize_double_extension: true # Detect inner extension (e.g. shell.php.jpg)
  suspicious_inner_extensions: [php, jsp, asp, aspx, js, sh, bat, exe]
  max_field_name_len: 128
  max_filename_len: 256

cmdi_protection:
  enabled: true
  action: block
  response_code: 403
  case_sensitive: false
  check_query_params: true
  check_post_body: true
  check_headers: false
  max_payload_size: 8192
  decode_url: true
  patterns:
    - "(?i)\\b(sh|bash|dash|ksh|zsh)\\b"
    - "(?i)\\b(cmd\\.exe|powershell(\\.exe)?)\\b"
  keywords:
    - ";id"
    - ";whoami"
    - ";ls"
    - "&& id"
    - "|| id"
    - "`id`"
    - "$(id)"
    - "| id"
    - "sh -c"
    - "bash -c"
    - "cmd.exe /c"
    - "powershell -Command"
    - "cat /etc/passwd"
# User-Agent Filter configuration
user_agent_filter:
  enabled: true # Toggle user-agent blocking
  block_response_code: 403 # Response code when blocking
  case_insensitive: true # Enable case-insensitive matching for simplicity
  # Exact user agents to block (must match full string) - keep only very specific bot signatures
  blocked_exact:
    - "BadScraper/1.0"
    - "EvilBot"
  # Substring matches (any occurrence will trigger block) - broader patterns including Chrome/Mozilla
  blocked_substrings:
    # - "curl/" # block command-line scraping
    - "wget" # block wget usage
    - "python-requests" # generic python requests scripts
    # - "chrome" # block any Chrome-based UA (may be aggressive)
    # - "mozilla" # VERY aggressive (blocks most browsers) remove if too broad
  # Regex patterns for advanced matching
  blocked_regex:
    - "(?i)masscan" # masscan scanners
    - "(?i)nikto" # Nikto scanner
    - "(?i)(?:acunetix|netsparker)" # common commercial scanners
    # - "(?i)sqlmap" # SQLMap tool
    # - "(?i)dirbuster" # directory brute force tools

# Real client IP extraction behind trusted proxies
# - Enable this when your WAF sits behind a reverse proxy (Nginx, Traefik, HAProxy, Cloudflare, etc.).
# - The WAF will only trust client IP headers when the immediate peer socket IP
#   (session.client_addr) is within one of these trusted_proxies networks.
# - Adjust the trusted_proxies to match where your reverse proxy connects from.
#   For local proxy on the same host use 127.0.0.1/32. For Docker default networks, 172.16.0.0/12 is common.
real_ip:
  enabled: true
  trusted_proxies:
    - "127.0.0.1/32" # loopback (reverse proxy on same host)
    - "::1/128" # IPv6 loopback
    - "172.16.0.0/12" # Docker default bridge networks (adjust if needed)
    # - "192.168.0.0/16" # Uncomment if your proxy connects from a LAN subnet
    # - "10.0.0.0/8"     # Uncomment if your proxy connects from a 10.x.x.x subnet
  # Header preference order (case-insensitive). First matching header wins.
  header_order:
    - "x-real-ip"
    - "cf-connecting-ip"
    - "x-forwarded-for"
    - "forwarded"

# Phase 1 Note: Path canonicalization (collapse //, resolve . and .., selective unreserved percent-decode) happens automatically before routing & inspections.
# Phase 1 Note: Config hot-reload uses SHA-256 hashing & rate limiting (max 5 reloads / 30s, then 30s cooldown). No YAML settings required presently.

# Path Traversal Protection Configuration
path_traversal_protection:
  enabled: true # Enable/disable path traversal protection
  action: "block" # Action to take: "block" or "log"
  response_code: 403 # HTTP response code when blocking
  case_sensitive: false # Whether pattern/keyword matching is case sensitive
  max_url_length: 2048 # Maximum URL length to process
  check_query_params: true # Check URL query parameters for path traversal
  check_post_body: true # Check POST body for path traversal (limited size)
  max_body_size: 8192 # Maximum body size to check (in bytes)
  block_message: "Path traversal attempt detected"

  # Custom regex patterns for path traversal detection
  patterns:
    # Classic directory traversal patterns
    - "(?i)\\.\\.[/\\\\]"
    - "(?i)[/\\\\]\\.\\.[/\\\\]"
    - "(?i)\\.\\.\\\\"
    - "(?i)\\.\\./"

    # URL encoded variations
    - "(?i)%2e%2e[/\\\\]"
    - "(?i)%2e%2e%2f"
    - "(?i)%2e%2e%5c"
    - "(?i)\\.%2e[/\\\\]"
    - "(?i)%2e\\.[/\\\\]"

    # Double URL encoding
    - "(?i)%252e%252e"
    - "(?i)%252f"
    - "(?i)%255c"

    # UTF-8 overlong encoding
    - "(?i)%c0%af"
    - "(?i)%c1%9c"

    # Unicode normalization bypasses
    - "(?i)%u002e"
    - "(?i)%u002f"
    - "(?i)%u005c"

    # Common absolute path patterns (Unix/Linux)
    - "(?i)^[/\\\\]etc[/\\\\]"
    - "(?i)^[/\\\\]usr[/\\\\]"
    - "(?i)^[/\\\\]var[/\\\\]"
    - "(?i)^[/\\\\]root[/\\\\]"
    - "(?i)^[/\\\\]home[/\\\\]"
    - "(?i)^[/\\\\]tmp[/\\\\]"
    - "(?i)^[/\\\\]boot[/\\\\]"
    - "(?i)^[/\\\\]proc[/\\\\]"
    - "(?i)^[/\\\\]sys[/\\\\]"

    # Common absolute path patterns (Windows)
    - "(?i)^[a-z]:\\\\"
    - "(?i)c:\\\\windows"
    - "(?i)c:\\\\program files"
    - "(?i)c:\\\\users"
    - "(?i)c:\\\\inetpub"

    # Null byte injection
    - "(?i)%00"
    - "(?i)\\\\x00"

    # File protocol abuse
    - "(?i)file:[/\\\\]{2,}"

    # Backslash variations
    - "(?i)\\.\\.\\\\\\\\"
    - "(?i)\\\\\\\\\\.\\."

    # Multiple consecutive dots
    - "(?i)\\.{3,}"

    # Mixed slash patterns
    - "(?i)\\.\\.[/\\\\]\\.\\.[/\\\\]"
    - "(?i)\\.\\.\\\\\\\\\\.\\."
    - "(?i)\\.\\.//\\.\\."

  # Keywords that indicate path traversal attempts
  keywords:
    # Basic traversal sequences
    - "../"
    - "..\\"
    - "..%2f"
    - "..%5c"
    - "%2e%2e%2f"
    - "%2e%2e%5c"

    # Common sensitive files (Unix/Linux)
    - "/etc/passwd"
    - "/etc/shadow"
    - "/etc/hosts"
    - "/etc/fstab"
    - "/etc/crontab"
    - "/etc/sudoers"
    - "/etc/ssh/sshd_config"
    - "/etc/apache2/apache2.conf"
    - "/etc/nginx/nginx.conf"
    - "/etc/mysql/my.cnf"
    - "/proc/self/environ"
    - "/proc/version"
    - "/proc/cmdline"
    - "/var/log/auth.log"
    - "/var/log/apache2/access.log"
    - "/var/log/nginx/access.log"
    - "/root/.ssh/id_rsa"
    - "/root/.bash_history"
    - "/home/.ssh/id_rsa"

    # Common sensitive files (Windows)
    - "c:\\windows\\system32\\config\\sam"
    - "c:\\windows\\system32\\config\\system"
    - "c:\\windows\\system32\\config\\security"
    - "c:\\windows\\system32\\drivers\\etc\\hosts"
    - "c:\\windows\\win.ini"
    - "c:\\windows\\system.ini"
    - "c:\\boot.ini"
    - "c:\\autoexec.bat"
    - "c:\\config.sys"
    - "c:\\inetpub\\wwwroot\\web.config"

    # Application-specific sensitive files
    - ".env"
    - ".htaccess"
    - ".htpasswd"
    - "wp-config.php"
    - "config.php"
    - "database.yml"
    - "settings.py"
    - "web.config"
    - "applicationhost.config"

    # Log files
    - "access.log"
    - "error.log"
    - "access_log"
    - "error_log"
    - "debug.log"
    - "app.log"

    # Backup files
    - ".bak"
    - ".backup"
    - ".old"
    - ".orig"
    - ".save"
    - ".tmp"

    # Database files
    - ".sqlite"
    - ".db"
    - ".mdb"
    - ".sql"
    - ".dump"

    # Private keys and certificates
    - ".pem"
    - ".key"
    - ".crt"
    - ".p12"
    - ".pfx"
    - "id_rsa"
    - "id_dsa"
    - "private.key"

    # Version control
    - ".git/config"
    - ".svn/entries"
    - ".hg/hgrc"

    # IDE files
    - ".vscode/settings.json"
    - ".idea/workspace.xml"

    # Null byte attempts
    - "%00"
    - "\\x00"

    # File protocol
    - "file://"
    - "file:///"
# XSS Protection Configuration
xss_protection:
  enabled: true # Enable/disable XSS protection
  action: "block" # Action to take: "block" or "log"
  response_code: 403 # HTTP response code when blocking
  case_sensitive: false # Whether pattern/keyword matching is case sensitive
  max_url_length: 2048 # Maximum URL length to process
  check_query_params: true # Check URL query parameters for XSS
  check_post_body: true # Check POST body for XSS (limited size)
  max_body_size: 8192 # Maximum body size to check (in bytes)
  check_headers: false # Check HTTP headers for XSS (careful with false positives)
  decode_url: true # URL decode content before checking
  decode_html_entities: true # Decode HTML entities before checking
  block_message: "XSS attempt detected"

  # Custom regex patterns for XSS detection
  patterns:
    # Basic script tags
    - "(?i)<script[^>]*>"
    - "(?i)</script>"
    - "(?i)<script[^>]*/>"

    # Event handlers
    - "(?i)\\bon\\w+\\s*="
    - "(?i)\\bon(load|error|click|focus|blur|change|submit|reset|select|resize|scroll|unload|beforeunload|mouseover|mouseout|mousemove|mousedown|mouseup|keydown|keyup|keypress)\\s*="

    # JavaScript and other protocols
    - "(?i)javascript\\s*:"
    - "(?i)vbscript\\s*:"
    - "(?i)data\\s*:"

    # Iframe and object tags
    - "(?i)<iframe[^>]*>"
    - "(?i)<object[^>]*>"
    - "(?i)<embed[^>]*>"
    - "(?i)<applet[^>]*>"

    # Style-based XSS
    - "(?i)<style[^>]*>"
    - "(?i)style\\s*="
    - "(?i)expression\\s*\\("
    - "(?i)behavior\\s*:"
    - "(?i)-moz-binding\\s*:"

    # Form and input manipulation
    - "(?i)<form[^>]*>"
    - "(?i)<input[^>]*>"
    - "(?i)<textarea[^>]*>"
    - "(?i)<select[^>]*>"

    # Meta and link tags
    - "(?i)<meta[^>]*>"
    - "(?i)<link[^>]*>"

    # URL encoded variations
    - "(?i)%3Cscript"
    - "(?i)%3C%2Fscript%3E"
    - "(?i)%6A%61%76%61%73%63%72%69%70%74"

    # Unicode and HTML entity variations
    - "(?i)&#[0-9]+;"
    - "(?i)&#x[0-9a-f]+;"
    - "(?i)&[a-z]+;"

    # Document object manipulation
    - "(?i)document\\s*\\.\\s*write"
    - "(?i)document\\s*\\.\\s*cookie"
    - "(?i)document\\s*\\.\\s*location"
    - "(?i)window\\s*\\.\\s*location"

    # Common XSS functions
    - "(?i)alert\\s*\\("
    - "(?i)confirm\\s*\\("
    - "(?i)prompt\\s*\\("
    - "(?i)eval\\s*\\("
    - "(?i)setTimeout\\s*\\("
    - "(?i)setInterval\\s*\\("

    # Base64 encoded scripts
    - "(?i)data:text/html;base64"
    - "(?i)data:application/javascript;base64"

    # SVG-based XSS
    - "(?i)<svg[^>]*>"
    - "(?i)<foreignobject[^>]*>"

    # Template literals and template injection
    - "(?i)`[^`]*\\$\\{[^}]*\\}[^`]*`"

    # Expression language injection
    - "(?i)\\$\\{[^}]*\\}"
    - "(?i)<%[^%]*%>"
    - "(?i)\\{\\{[^}]*\\}\\}"
    - "(?i)\\[%[^%]*%\\]"

    # Advanced evasion techniques
    # Dynamic function construction patterns
    - "(?i)(\\w+)(\\s*=\\s*)(!\\w+\\s*\\+\\s*\\w+)"
    - "(?i)\\[\\w+\\]\\s*\\(\\s*(\\w+)?\\s*\\+\\s*.*\\)\\s*\\(\\s*\\)"
    - "(?i)\\w+\\[\\w+\\]\\s*\\(\\s*[^)]*\\s*\\)\\s*\\(\\s*\\)"

    # String manipulation from boolean/undefined values
    - "(?i)\\b\\w+\\s*=\\s*!\\w+\\s*\\+\\s*\\w+\\b"
    - "(?i)!\\[\\]\\s*\\+\\s*!\\[\\]"
    - "(?i)!\\[\\]\\s*\\+\\s*\\[\\]"
    - "(?i)\\[\\]\\s*\\+\\s*\\[\\]"

    # Character extraction from built-in objects
    - "(?i)\\(\\[\\]\\[\\w+\\]\\+\\[\\]\\)"
    - "(?i)\\(\\{\\}\\[\\w+\\]\\+\\[\\]\\)"
    - "(?i)\\(!\\[\\]\\+\\[\\]\\)\\[\\w+\\]"
    - "(?i)\\(\\+\\[\\]\\+\\[\\]\\)"

    # Function constructor patterns
    - "(?i)\\[\\]\\[\\w+\\]\\[\\w+\\]"
    - "(?i)\\w+\\[\\w+\\]\\[\\w+\\]\\s*\\(.*\\)"
    - "(?i)\\(\\[\\]\\[\\w+\\]\\+\\[\\]\\)\\[\\w+\\]\\[\\w+\\]"

    # Advanced string building patterns
    - "(?i)\\w+\\s*\\+\\s*\\w+\\s*\\+\\s*\\w+\\s*\\+\\s*\\w+\\s*\\+\\s*\\w+"
    - "(?i)(\\w+\\[\\d+\\]\\s*\\+\\s*){3,}"
    - "(?i)\\w+\\[\\w+\\]\\s*\\+\\s*\\w+\\[\\w+\\]"

    # Obfuscated eval patterns
    - "(?i)\\w+\\[\\w+\\]\\s*\\(\\s*\\w+\\s*\\)"
    - "(?i)\\[\\w+\\]\\[\\w+\\]\\s*\\(\\s*[^)]*\\s*\\)"
    - "(?i)this\\[\\w+\\]\\s*\\(\\s*[^)]*\\s*\\)"

    # JSFuck-style patterns
    - "(?i)\\(\\+\\+\\+\\["
    - "(?i)\\[\\+\\[\\]\\]"
    - "(?i)\\[\\+!\\+\\[\\]\\]"
    - "(?i)\\[!\\[\\]\\+!\\[\\]\\]"

  # Keywords that indicate XSS attempts
  keywords:
    # Basic XSS payloads
    - "<script>"
    - "</script>"
    - "<script/>"
    - "javascript:"
    - "vbscript:"
    - "data:text/html"

    # Event handlers
    - "onload="
    - "onerror="
    - "onclick="
    - "onmouseover="
    - "onmouseout="
    - "onfocus="
    - "onblur="
    - "onchange="
    - "onsubmit="
    - "onreset="
    - "onselect="
    - "onresize="
    - "onscroll="
    - "onunload="
    - "onbeforeunload="
    - "onkeydown="
    - "onkeyup="
    - "onkeypress="
    - "onmousemove="
    - "onmousedown="
    - "onmouseup="

    # Common XSS functions
    - "alert("
    - "confirm("
    - "prompt("
    - "eval("
    - "setTimeout("
    - "setInterval("
    - "document.write("
    - "document.cookie"
    - "document.location"
    - "window.location"

    # HTML tags commonly used in XSS
    - "<iframe"
    - "<object"
    - "<embed"
    - "<applet"
    - "<style"
    - "<form"
    - "<input"
    - "<textarea"
    - "<select"
    - "<meta"
    - "<link"
    - "<svg"
    - "<foreignobject"

    # Style-based XSS
    - "expression("
    - "behavior:"
    - "-moz-binding:"
    - "style="

    # URL encoded variations
    - "%3Cscript"
    - "%3C%2Fscript%3E"
    - "%6A%61%76%61%73%63%72%69%70%74"
    - "%3Ciframe"
    - "%3Cobject"
    - "%3Cembed"
    - "%3Cstyle"
    - "%3Cform"
    - "%3Cinput"
    - "%3Cmeta"
    - "%3Clink"
    - "%3Csvg"

    # HTML entities
    - "&lt;script&gt;"
    - "&lt;/script&gt;"
    - "&lt;iframe"
    - "&lt;object"
    - "&lt;embed"
    - "&lt;style"
    - "&lt;form"
    - "&lt;input"
    - "&lt;meta"
    - "&lt;link"
    - "&lt;svg"

    # Unicode encoded
    - "\\u003cscript"
    - "\\u003c/script\\u003e"
    - "\\u006aavascript:"

    # Base64 encoded common payloads
    - "PHNjcmlwdD4="
    - "PC9zY3JpcHQ+"
    - "amF2YXNjcmlwdDo="

    # Common XSS vectors
    - "<img src=x onerror="
    - "<body onload="
    - "<div onmouseover="
    - "<input onfocus="
    - "<select onfocus="
    - "<textarea onfocus="
    - "<button onclick="
    - '<a href="javascript:'
    - '<form action="javascript:'

    # Template injection
    - "${"
    - "{{"
    - "<%"
    - "[%"

    # Import statements
    - "import("
    - "import "

    # WebAssembly
    - "WebAssembly.instantiate"

    # Modern XSS vectors
    - "fetch("
    - "XMLHttpRequest"
    - "FileReader"
    - "Worker("
    - "SharedWorker("
    - "ServiceWorker"
    - "postMessage("
    - "addEventListener("

    # CSS injection
    - "@import"
    - "url("
    - "expression("

    # Data URLs
    - "data:image/svg+xml"
    - "data:application/javascript"
    - "data:text/javascript"

    # Protocol handlers
    - "chrome:"
    - "chrome-extension:"
    - "moz-extension:"
    - "safari-extension:"
    - "ms-appx:"
    - "ms-appx-web:"

    # File protocols
    - "file:"
    - "ftp:"
    - "gopher:"
    - "ldap:"

    # Special characters often used in XSS
    - "String.fromCharCode("
    - "unescape("
    - "decodeURI("
    - "decodeURIComponent("

    # Advanced evasion and obfuscation keywords
    # Dynamic function construction
    - "Function("
    - "[constructor]"
    - "constructor"

    # String manipulation from primitives
    - "!![]+!![]"
    - "![]+[]"
    - "!![]+[]"
    - "[]+[]"
    - "+[]"
    - "[][[]]"

    # Character extraction patterns
    - "([]+[])[+[]]"
    - "(!![]+[])[+[]]"
    - "(![]+[])[+[]]"
    - "([].constructor+[])"
    - "({}.constructor+[])"

    # Common obfuscation patterns
    - "String.fromCharCode"
    - "charAt"
    - "charCodeAt"
    - "fromCharCode"

    # JSFuck patterns
    - "++[[]][+[]]"
    - "[+[]]"
    - "[+!+[]]"
    - "[!![]]"

    # Bracket notation access
    - "['constructor']"
    - "['eval']"
    - "['alert']"
    - '["constructor"]'
    - '["eval"]'
    - '["alert"]'

    # Window/document bracket access
    - "window['"
    - "document['"
    - "this['"
    - "self['"
    - "top['"
    - "parent['"

    # Encoded function names
    - "\\x65\\x76\\x61\\x6c"
    - "\\x61\\x6c\\x65\\x72\\x74"
    - "\\x46\\x75\\x6e\\x63\\x74\\x69\\x6f\\x6e"

  # Headers to exclude from XSS checking (to avoid false positives)
  whitelisted_headers:
    - "content-type"
    - "accept"
    - "accept-language"
    - "accept-encoding"
    - "cache-control"
    - "pragma"
    - "authorization"
    - "host"
    - "connection"
    - "upgrade-insecure-requests"

# GeoIP Filter (MaxMind GeoLite2 DB)
geoip_filter:
  enabled: true
  db_path: ./geoip/geolite2.mmdb # Path to .mmdb file
  block_response_code: 403
  soft_mode: false # When true: do not block; log + metrics only (dry run) to evaluate impact
